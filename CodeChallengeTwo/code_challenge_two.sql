DROP TABLE EMPLOYEE;
DROP TABLE DEPARTMENT;

CREATE TABLE DEPARTMENT (
    DEPARTMENT_ID INTEGER,
    DEPARTMENT_NAME VARCHAR2(30),
    CONSTRAINT PK_DEPARTMENT PRIMARY KEY (DEPARTMENT_ID)
);
/

CREATE TABLE EMPLOYEE (
    EMPLOYEE_ID INTEGER,
    EMP_FIRSTNAME VARCHAR2(30),
    EMP_LASTNAME VARCHAR2(30),
    DEPARTMENT_ID INTEGER,
    SALARY NUMBER(10,2),
    EMP_EMAIL VARCHAR2(50),
    CONSTRAINT PK_EMPLOYEE PRIMARY KEY (EMPLOYEE_ID),
    CONSTRAINT FK_EMPLOYEE FOREIGN KEY (DEPARTMENT_ID) REFERENCES DEPARTMENT(DEPARTMENT_ID)
);
/

CREATE SEQUENCE SQ_EMP_PK
START WITH 1
INCREMENT BY 1;
/

CREATE SEQUENCE SQ_DEPT_PK
START WITH 1
INCREMENT BY 1;
/

CREATE OR REPLACE TRIGGER TR_INSERT_EMP_ID
BEFORE INSERT ON EMPLOYEE
FOR EACH ROW
BEGIN
    SELECT SQ_EMP_PK.NEXTVAL INTO :NEW.EMPLOYEE_ID FROM DUAL;
END;
/

CREATE OR REPLACE TRIGGER TR_INSERT_DEPT_ID
BEFORE INSERT ON DEPARTMENT
FOR EACH ROW
BEGIN
    SELECT SQ_DEPT_PK.NEXTVAL INTO :NEW.DEPARTMENT_ID FROM DUAL;
END;
/

INSERT INTO DEPARTMENT (DEPARTMENT_NAME) VALUES ('Custodian');
INSERT INTO DEPARTMENT (DEPARTMENT_NAME) VALUES ('Janitor');
INSERT INTO DEPARTMENT (DEPARTMENT_NAME) VALUES ('Garbageman');

INSERT INTO EMPLOYEE (EMP_FIRSTNAME, EMP_LASTNAME, DEPARTMENT_ID, SALARY, EMP_EMAIL)
    VALUES ('Aaron', 'Andrews', 1, '38000.00', 'aa@trash.com');
INSERT INTO EMPLOYEE (EMP_FIRSTNAME, EMP_LASTNAME, DEPARTMENT_ID, SALARY, EMP_EMAIL)
    VALUES ('Billy', 'Bobby', 2, '31000.00', 'bb@trash.com');
INSERT INTO EMPLOYEE (EMP_FIRSTNAME, EMP_LASTNAME, DEPARTMENT_ID, SALARY, EMP_EMAIL)
    VALUES ('Chris', 'Cook', 3, '52000.00', 'cc@trash.com');
INSERT INTO EMPLOYEE (EMP_FIRSTNAME, EMP_LASTNAME, DEPARTMENT_ID, SALARY, EMP_EMAIL)
    VALUES ('Darren', 'Dylan', 1, '19000.00', 'dd@trash.com');
INSERT INTO EMPLOYEE (EMP_FIRSTNAME, EMP_LASTNAME, DEPARTMENT_ID, SALARY, EMP_EMAIL)
    VALUES ('Evan', 'Evanson', 3, '180000.00', 'ee@trash.com');
INSERT INTO EMPLOYEE (EMP_FIRSTNAME, EMP_LASTNAME, DEPARTMENT_ID, SALARY, EMP_EMAIL)
    VALUES ('Freddy', 'Fazzer', 3, '70000.00', 'ff@trash.com');
    
CREATE OR REPLACE PROCEDURE SP_GIVE_RAISE (DEPT_ID IN INTEGER, AVG_SALARY OUT NUMBER, RAISE_SUCCESS OUT INTEGER)
AS
BEGIN
    UPDATE EMPLOYEE SET SALARY = SALARY * 1.1 WHERE DEPARTMENT_ID = DEPT_ID;
    SELECT COUNT(*) INTO RAISE_SUCCESS FROM DEPARTMENT WHERE DEPARTMENT_ID = DEPT_ID;
    SELECT AVG(SALARY) INTO AVG_SALARY FROM EMPLOYEE WHERE DEPARTMENT_ID = DEPT_ID;
END;
/

----TEST STORED PROCEDURE
----GOOD CASE
--DECLARE
--    DEPTID INTEGER := 1;
--    AVGSAL NUMBER(10,2) := 0;
--    SUCCESS INTEGER := 0;
--BEGIN
--    SP_GIVE_RAISE(DEPTID, AVGSAL, SUCCESS);
--    DBMS_OUTPUT.PUT_LINE(AVGSAL || ' ' || SUCCESS);
--END;
--/
--
----BAD CASE
--DECLARE
--    DEPTID INTEGER := 7;
--    AVGSAL NUMBER(10,2) := 0;
--    SUCCESS INTEGER := 0;
--BEGIN
--    SP_GIVE_RAISE(DEPTID, AVGSAL, SUCCESS);
--    DBMS_OUTPUT.PUT_LINE(AVGSAL || ' ' || SUCCESS);
--END;
--/