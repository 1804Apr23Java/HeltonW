/*
*   2.0 SQL Queries
*/

--2.1 SELECT
SELECT * FROM EMPLOYEE;
SELECT * FROM EMPLOYEE WHERE LASTNAME='King';
SELECT * FROM EMPLOYEE WHERE FIRSTNAME='Andrew' AND REPORTSTO IS NULL;

--2.2 ORDER BY
SELECT * FROM ALBUM ORDER BY TITLE DESC;
SELECT FIRSTNAME FROM CUSTOMER ORDER BY CITY ASC;

--2.3 INSERT INTO
INSERT INTO GENRE VALUES (26, 'Alt Opera');
INSERT INTO GENRE VALUES (27, 'Alt Classical');

INSERT INTO EMPLOYEE VALUES (9, 'Bingham', 'Donny', 'Janitor', 3, TO_DATE('12/08/1977', 'MM/DD/YYYY')
    , TO_DATE('02/28/2001', 'MM/DD/YYYY'), '123 Fake Street', 'Springfield', 'AB', 'Canada'
    , 'T1H 123', '+1 (123) 432-1234', '+1 (987) 987-8765', 'donny@chinookcorp.com');
INSERT INTO EMPLOYEE (EMPLOYEEID, LASTNAME, FIRSTNAME) VALUES (20, 'Clowny', 'Susan');

INSERT INTO CUSTOMER VALUES (60, 'Jersey', 'Samson', 'ABC Corp', '999 Wherever Road', 'Somewhere', 'TX', 'USA'
    , '98765', '+1 (123) 222-1234', '+1 (222) 333-8765', 'jersey@hulahoop.com', 5);
INSERT INTO CUSTOMER (CUSTOMERID, FIRSTNAME, LASTNAME, EMAIL) VALUES (70, 'Orange', 'Joe', 'phillyfry@pexpress.com');

--2.4 UPDATE
UPDATE CUSTOMER SET FIRSTNAME='Robert', LASTNAME='Walter' WHERE FIRSTNAME='Aaron' AND LASTNAME='Mitchell';
UPDATE ARTIST SET NAME='CCR' WHERE NAME='Creedence Clearwater Revival';

--2.5 LIKE
SELECT * FROM INVOICE WHERE BILLINGADDRESS LIKE 'T%';

--2.6 BETWEEN
SELECT * FROM INVOICE WHERE TOTAL BETWEEN 15 AND 50;
SELECT * FROM EMPLOYEE WHERE HIREDATE BETWEEN '01-JUN-2003' AND '01-MAR-2004';

--2.7 DELETE
ALTER TABLE INVOICELINE DROP CONSTRAINT FK_INVOICELINEINVOICEID;
ALTER TABLE INVOICELINE
    ADD CONSTRAINT FK_INVOICELINEINVOICEID FOREIGN KEY(INVOICEID) REFERENCES INVOICE(INVOICEID) ON DELETE CASCADE;

ALTER TABLE INVOICE DROP CONSTRAINT FK_INVOICECUSTOMERID;
ALTER TABLE INVOICE
    ADD CONSTRAINT FK_INVOICECUSTOMERID FOREIGN KEY(CUSTOMERID) REFERENCES CUSTOMER(CUSTOMERID) ON DELETE CASCADE;

DELETE FROM CUSTOMER WHERE FIRSTNAME = 'Robert' AND LASTNAME = 'Walter';

/*
*   3.0 SQL Functions
*/

--3.1 System Defined Functions
SELECT TO_CHAR(SYSDATE, 'HH:MI:SS') AS "Current Time" FROM DUAL;
SELECT LENGTH(NAME) FROM MEDIATYPE;

--3.2 System Defined Aggregate Functions
SELECT ROUND(AVG(TOTAL), 2) AS "avg total" FROM INVOICE;
SELECT MAX(UNITPRICE) FROM TRACK;

--3.3 User Defined Scalar Functions
CREATE OR REPLACE FUNCTION AVG_INVOICELINE
RETURN NUMBER AS
    IVA NUMBER;
    IVB NUMBER;
BEGIN
    SELECT COUNT(*) INTO IVA FROM INVOICELINE;
    SELECT SUM(UNITPRICE) INTO IVB FROM INVOICELINE;
    RETURN IVB / IVA;
END;
/

DECLARE
    MYOUT NUMBER;
BEGIN
    MYOUT := AVG_INVOICELINE();
    DBMS_OUTPUT.PUT_LINE(MYOUT);
END;
/

--3.4 User Defined Table Valued Functions
--DROP TABLE MYTABLE;

CREATE OR REPLACE TYPE MYTABLE AS TABLE OF NUMBER;
/

CREATE OR REPLACE FUNCTION AFTER_SIXTY_EIGHT
RETURN MYTABLE AS
    RETURN_TABLE MYTABLE;
BEGIN
    SELECT EMPLOYEEID BULK COLLECT INTO RETURN_TABLE FROM EMPLOYEE WHERE BIRTHDATE < TO_DATE('1968/01/01', 'YYYY/MM/DD');
    RETURN RETURN_TABLE;
END;
/

SELECT * FROM TABLE(AFTER_SIXTY_EIGHT());
/
--SELECT EMPLOYEEID FROM EMPLOYEE WHERE BIRTHDATE < TO_DATE('1968/01/01', 'YYYY/MM/DD');


/*
*   4.0 Stored Procedures
*/

--4.1 Basic Stored Procedure
CREATE OR REPLACE PROCEDURE GET_EMPLOYEE_FIRST_LAST (EMPLOYEE_NAMES OUT SYS_REFCURSOR)
AS    
BEGIN
    OPEN EMPLOYEE_NAMES FOR
        SELECT FIRSTNAME, LASTNAME FROM EMPLOYEE;
END GET_EMPLOYEE_FIRST_LAST;
/

SELECT GET_EMPLOYEE_FIRST_LAST FROM DUAL;
/

--4.2 Stored Procedure Input Parameters

--4.3 Stored Procedure Output Parameters

/*
*   5.0 Transactions
*/

CREATE OR REPLACE PROCEDURE DEL_INVOICE (INV_ID IN NUMBER)
AS
BEGIN
    SAVEPOINT S1;
    DELETE FROM INVOICE WHERE INVOICEID = INV_ID;
    COMMIT;
END;
/

EXECUTE DEL_INVOICE(500);

INSERT INTO INVOICE (INVOICEID, CUSTOMERID, INVOICEDATE, TOTAL) VALUES (500, 1, TO_DATE('1999/09/09', 'YYYY/MM/DD'), 200.00);
DELETE FROM INVOICE WHERE INVOICEID = 500;
SELECT * FROM INVOICE WHERE INVOICEID = 500;

/*
*   6.0 Triggers
*/

--6.1 AFTER/FOR
CREATE OR REPLACE TRIGGER TR_INSERT_NEW_EMP
AFTER INSERT ON EMPLOYEE
FOR EACH ROW
BEGIN
    SELECT 1 FROM DUAL;
END;
/

CREATE OR REPLACE TRIGGER TR_UPDATE_ALBUM
AFTER UPDATE ON ALBUM
FOR EACH ROW
BEGIN
    SELECT 1 FROM DUAL;
END;
/

CREATE OR REPLACE TRIGGER TR_DELETE_CUSTOMER
AFTER DELETE ON CUSTOMER
FOR EACH ROW
BEGIN
    SELECT 1 FROM DUAL;
END;

/*
*   7.0 Joins
*/

--7.1 INNER
SELECT CUSTOMER.FIRSTNAME, CUSTOMER.LASTNAME, INVOICE.INVOICEID FROM CUSTOMER 
    INNER JOIN INVOICE ON CUSTOMER.CUSTOMERID = INVOICE.CUSTOMERID;

--7.2 OUTER
SELECT CUSTOMER.CUSTOMERID, CUSTOMER.FIRSTNAME, CUSTOMER.LASTNAME, INVOICE.INVOICEID, INVOICE.TOTAL FROM CUSTOMER
    FULL OUTER JOIN INVOICE ON CUSTOMER.CUSTOMERID = INVOICE.CUSTOMERID;

--7.3 RIGHT
SELECT ARTIST.NAME AS "Artist Name", ALBUM.TITLE AS "Album Title" FROM ALBUM 
    RIGHT OUTER JOIN ARTIST ON ALBUM.ARTISTID = ARTIST.ARTISTID;

--7.4 CROSS
SELECT * FROM ALBUM CROSS JOIN ARTIST ORDER BY ARTIST.NAME ASC;

--7.5 SELF
SELECT E1.FIRSTNAME || ' ' || E1.LASTNAME AS "Employee", E2.FIRSTNAME || ' ' || E2.LASTNAME AS "Reports To" 
    FROM EMPLOYEE E1, EMPLOYEE E2 WHERE E1.REPORTSTO = E2.EMPLOYEEID;