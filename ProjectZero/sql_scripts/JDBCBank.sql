--DROP TABLE BANK_ACCOUNT;
--DROP TABLE BANK_USER;
--DROP SEQUENCE SQ_USER_PK;
--DROP SEQUENCE SQ_ACCOUNT_PK;

CREATE TABLE BANK_USER (
    USER_ID INTEGER PRIMARY KEY,
    USER_NAME VARCHAR(50) UNIQUE NOT NULL,
    PASSWORD_HASH VARCHAR(50) NOT NULL
);
/

CREATE TABLE BANK_ACCOUNT (
    ACCOUNT_ID INTEGER PRIMARY KEY,
    USER_ID INTEGER,
    ACCOUNT_BALANCE NUMBER (14,2),
    CONSTRAINT USER_ID_FK FOREIGN KEY (USER_ID) REFERENCES BANK_USER (USER_ID) ON DELETE CASCADE
);
/

CREATE SEQUENCE SQ_USER_PK
START WITH 1
INCREMENT BY 1;
/

CREATE OR REPLACE TRIGGER TR_INSERT_USER_ID
BEFORE INSERT ON BANK_USER
FOR EACH ROW
BEGIN
    SELECT SQ_USER_PK.NEXTVAL INTO :NEW.USER_ID FROM DUAL;
END;
/

CREATE SEQUENCE SQ_ACCOUNT_PK
START WITH 1
INCREMENT BY 1;
/

CREATE OR REPLACE TRIGGER TR_INSERT_ACCOUNT_ID
BEFORE INSERT ON BANK_ACCOUNT
FOR EACH ROW
BEGIN
    SELECT SQ_ACCOUNT_PK.NEXTVAL INTO :NEW.ACCOUNT_ID FROM DUAL;
END;
/

CREATE OR REPLACE PROCEDURE MONTHLY_FEE (FEE NUMBER) AS
    PREV NUMBER(14, 2);
BEGIN
    FOR I IN (SELECT * FROM BANK_ACCOUNT) LOOP
        IF I.ACCOUNT_BALANCE > FEE THEN
            PREV := I.ACCOUNT_BALANCE;
            UPDATE BANK_ACCOUNT SET ACCOUNT_BALANCE = (PREV - FEE) WHERE ACCOUNT_ID = I.ACCOUNT_ID;
        ELSE
            UPDATE BANK_ACCOUNT SET ACCOUNT_BALANCE = 0 WHERE ACCOUNT_ID = I.ACCOUNT_ID;
        END IF;
    END LOOP;
END MONTHLY_FEE;
/