CREATE TABLE BEAR (
    BEAR_ID INTEGER PRIMARY KEY,
    BEAR_NAME VARCHAR2(100),
    BEAR_BIRTHDATE DATE,
    BEAR_WEIGHT NUMBER(5, 2) DEFAULT 200.00,
    BEAR_TYPE_ID INTEGER NOT NULL,
    CAVE_ID INTEGER
);
/

CREATE TABLE BEAR_TYPE (
    BEAR_TYPE_ID INTEGER PRIMARY KEY,
    BEAR_TYPE_NAME VARCHAR2(100)
);
/
CREATE TABLE CAVE (
    CAVE_ID INTEGER PRIMARY KEY,
    CAVE_NAME VARCHAR(100),
    MAX_BEARS INTEGER DEFAULT 4
);
/
CREATE TABLE BEEHIVE (
    BEEHIVE_ID INTEGER PRIMARY KEY,
    BEEHIVE_WEIGHT NUMBER(5, 2) DEFAULT 75.00
);
/
CREATE TABLE BEAR_BEEHIVE (
    BEAR_ID INTEGER,
    BEEHIVE_ID INTEGER,
    PRIMARY KEY (BEAR_ID, BEEHIVE_ID)
);
/

--FOREIGN KEY CONSTRAINTS
ALTER TABLE BEAR
ADD CONSTRAINT FK_BEAR__BEAR_TYPE
FOREIGN KEY (BEAR_TYPE_ID) REFERENCES BEAR_TYPE(BEAR_TYPE_ID);
/

ALTER TABLE BEAR
ADD CONSTRAINT FK_BEAR_CAVE
FOREIGN KEY (CAVE_ID) REFERENCES CAVE(CAVE_ID);
/

ALTER TABLE BEAR_BEEHIVE
ADD CONSTRAINT FK_BEAR__BEAR_BEEHIVE
FOREIGN KEY (BEAR_ID) REFERENCES BEAR(BEAR_ID);
/

ALTER TABLE BEAR_BEEHIVE
ADD CONSTRAINT FK_BEEHIVE__BEAR_BEEHIVE
FOREIGN KEY (BEEHIVE_ID) REFERENCES BEEHIVE(BEEHIVE_ID);
/

--ADD SOME DATA
INSERT INTO BEAR_TYPE(BEAR_TYPE_ID, BEAR_TYPE_NAME) VALUES (1, 'Grizzly');
INSERT INTO BEAR_TYPE(BEAR_TYPE_ID, BEAR_TYPE_NAME) VALUES (2, 'Polar');
/

INSERT ALL 
INTO CAVE
VALUES (1, 'AWESOMECAVE1', 9)
INTO CAVE(CAVE_ID, CAVE_NAME)
VALUES (2, 'AWESOMECAVE2')
SELECT * FROM DUAL;
/

INSERT ALL
INTO BEAR(BEAR_ID, BEAR_NAME, BEAR_BIRTHDATE, BEAR_TYPE_ID, CAVE_ID)
VALUES (3, 'Ferdinand', TO_DATE('1987-08-18 00:00:00', 'yyyy_mm_dd hh24:mi:ss'), 1, 2)
INTO BEAR(BEAR_ID, BEAR_NAME, BEAR_BIRTHDATE, BEAR_TYPE_ID, CAVE_ID)
VALUES (8, 'Ernest', TO_DATE('1989-08-18 00:00:00', 'yyyy_mm_dd hh24:mi:ss'), 1, 1)
INTO BEAR
VALUES (9, 'Elon', TO_DATE('1999-02-18 00:00:00', 'yyyy_mm_dd hh24:mi:ss'), 400.00, 2, 1)
INTO BEAR
VALUES (10, 'Jeff', TO_DATE('1997-02-18 00:00:00', 'yyyy_mm_dd hh24:mi:ss'), 450.00, 2, 1)
SELECT * FROM DUAL;
/

INSERT INTO BEEHIVE(BEEHIVE_ID, BEEHIVE_WEIGHT) VALUES (1, 25.00);
INSERT INTO BEEHIVE(BEEHIVE_ID, BEEHIVE_WEIGHT) VALUES (2, 65.00);
INSERT INTO BEEHIVE(BEEHIVE_ID, BEEHIVE_WEIGHT) VALUES (3, 100.00);
INSERT INTO BEAR_BEEHIVE(BEAR_ID, BEEHIVE_ID) VALUES(3, 1);
INSERT INTO BEAR_BEEHIVE(BEAR_ID, BEEHIVE_ID) VALUES(10, 2);
INSERT INTO BEAR_BEEHIVE(BEAR_ID, BEEHIVE_ID) VALUES(9, 1);
/

--ALTER TABLE
ALTER TABLE BEAR_TYPE
ADD SURVIVAL_PROCEDURE VARCHAR2(200);
/

UPDATE BEAR_TYPE
SET SURVIVAL_PROCEDURE = 'Play dead'
WHERE BEAR_TYPE_ID = 1;
/

UPDATE BEAR_TYPE
SET SURVIVAL_PROCEDURE = 'LOL NONE'
WHERE BEAR_TYPE_ID = 2;
/

--Write a select statement to display bears 
SELECT BEAR.BEAR_ID, BEAR.BEAR_NAME, CAVE.CAVE_ID, CAVE.CAVE_NAME 
FROM (BEAR JOIN CAVE ON BEAR.CAVE_ID = CAVE.CAVE_ID);

--Examples
SELECT * FROM BEAR;
/

--CREATE SEQUENCES AND TRIGGERS TO PROVIDE OUT PRIMARY KEY VALUES
CREATE SEQUENCE SQ_BEAR_PK
START WITH 93
INCREMENT BY 1;
/

CREATE SEQUENCE SQ_CAVE_PK
START WITH 3
INCREMENT BY 1;
/

CREATE SEQUENCE SQ_BEAR_TYPE_PK
START WITH 3
INCREMENT BY 1
/

CREATE SEQUENCE SQ_BEEHIVE_PK
START WITH 3
INCREMENT BY 1;
/

CREATE OR REPLACE TRIGGER TR_INSERT_BEAR
BEFORE INSERT ON BEAR
FOR EACH ROW
BEGIN
    SELECT SQ_BEAR_PK.NEXTVAL INTO :NEW.BEAR_ID FROM DUAL;
END;

CREATE OR REPLACE TRIGGER TR_INSERT_CAVE
BEFORE INSERT ON CAVE
FOR EACH ROW
BEGIN
    SELECT SQ_CAVE_PK.NEXTVAL INTO :NEW.CAVE_ID FROM DUAL;
END;
/

CREATE OR REPLACE TRIGGER TR_INSERT_BEAR_TYPE
BEFORE INSERT ON BEAR_TYPE
FOR EACH ROW
BEGIN
    SELECT SQ_BEAR_TYPE_PK.NEXTVAL INTO :NEW.BEAR_TYPE_ID FROM DUAL;
END;
/

CREATE OR REPLACE TRIGGER TR_INSERT_BEEHIVE
BEFORE INSERT ON BEEHIVE
FOR EACH ROW
BEGIN
    SELECT SQ_BEEHIVE_PK.NEXTVAL INTO :NEW.BEEHIVE_ID FROM DUAL;
END;
/

INSERT INTO BEAR(BEAR_NAME, BEAR_BIRTHDATE, BEAR_WEIGHT, BEAR_TYPE_ID, CAVE_ID)
VALUES ('stacy3', TO_DATE('200-02-18 00:00:00', 'yyyy-mm-dd hh24:mi:ss'), DEFAULT, 2, 2);
/

--ADD A CHECK CONSTRAINT ON BEAR WEIGHT AND BEEHIVE WEIGHT
ALTER TABLE BEAR ADD CONSTRAINT CK_BEAR_WEIGHT_POSITIVE
CHECK (BEAR_WEIGHT > 0);
/

ALTER TABLE BEEHIVE ADD CONSTRAINT CK_BEEHIVE_WEIGHT_POSITIVE
CHECK (BEEHIVE_WEIGHT > 0);
/

ALTER TABLE BEAR ADD CONSTRAINT UQ_BEAR_NAME
UNIQUE (BEAR_NAME);
/

--VIEWS
--How many bears per cave
--Note: This uses a system-defined aggregate function 'count'
--Understand the difference between scalar and aggregate functions
CREATE VIEW VW_BEARS_PER_CAVE(CAVE, NUMBEAR)
AS
SELECT CAVE_NAME, COUNT(BEAR_ID)
FROM BEAR, CAVE
WHERE BEAR.CAVE_ID = CAVE.CAVE_ID
GROUP BY CAVE_NAME;
/

SELECT * FROM VW_BEARS_PER_CAVE;
/

--FUNCTIONS
--Some java-like functionality
CREATE OR REPLACE FUNCTION FIND_MAX_NUMBER(X in NUMBER, Y IN NUMBER)
RETURN NUMBER
IS
Z NUMBER;
BEGIN
    IF X > Y THEN
    Z := X; --PL/SQL ASSIGNMENT OPERATOR
    ELSE
    Z := Y;
    END IF;
    RETURN Z;
END;

DECLARE
FIRST_NUM NUMBER;
SECOND_NUM NUMBER;
MAX_NUM NUMBER;
BEGIN
    FIRST_NUM := 22;
    SECOND_NUM := 42;
    MAX_NUM := FIND_MAX_NUMBER(FIRST_NUM, SECOND_NUM);
    DBMS_OUTPUT.PUT_LINE('MAX: '||MAX_NUM);
END

--STORED PROCEDURE
--STORED PROCEDURE WITH A CURSOR AND LOOPING
CREATE OR REPLACE PROCEDURE GET_ALL_BEARS(S OUT SYS_REFCURSOR)
IS
BEGIN
OPEN S FOR
SELECT BEAR_ID, BEAR_NAME
FROM BEAR
END;

DECLARE
S SYS_REFCURSOR;
SOME_ID BEAR.BEAR_ID$TYPE; --set SOME_ID as whatever datatype BEAR_ID is
SOME_NAME BEAR.NAME$TYPE;
BEGIN
    GET_ALL_BEARS(s):
    LOOP
        FETCH S INTO SOME_ID, SOME_NAME;
        EXIT WHEN S%ISNOTFOUND; --Break out of the loop when no more rows are available
        DBMS_OUTPUT.PUT_LINE(SOME_ID||' Is current id, '||SOME_NAME|| ' Is current name');
    END LOOP;
    CLOSE S;
END;





//


--STORED PROCEDURE CHALLENGE
--Start by declaring the name of the procedure
CREATE OR REPLACE PROCEDURE SP_FEED_BEAR()
IS
BB_EXISTS INTEGER;
BEGIN
    SET TRANSACTION IO
    
    




--   Create database
--********************************************************************************/
CREATE USER projectzero
IDENTIFIED BY projectzero
DEFAULT TABLESPACE users
TEMPORARY TABLESPACE temp
QUOTA 10M ON users;

GRANT connect to projectzero;
GRANT resource to projectzero;
GRANT create session TO projectzero;
GRANT create table TO projectzero;
GRANT create view TO projectzero;
/